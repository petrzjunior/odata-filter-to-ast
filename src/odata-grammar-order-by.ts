
// Generated by peggy v. 1.2.0 (ts-pegjs plugin v. 1.2.2 )
//
// https://peggyjs.org/   https://github.com/metadevpro/ts-pegjs

"use strict";

export interface IFilePosition {
  offset: number;
  line: number;
  column: number;
}

export interface IFileRange {
  start: IFilePosition;
  end: IFilePosition;
  source: string;
}

export interface ILiteralExpectation {
  type: "literal";
  text: string;
  ignoreCase: boolean;
}

export interface IClassParts extends Array<string | IClassParts> {}

export interface IClassExpectation {
  type: "class";
  parts: IClassParts;
  inverted: boolean;
  ignoreCase: boolean;
}

export interface IAnyExpectation {
  type: "any";
}

export interface IEndExpectation {
  type: "end";
}

export interface IOtherExpectation {
  type: "other";
  description: string;
}

export type Expectation = ILiteralExpectation | IClassExpectation | IAnyExpectation | IEndExpectation | IOtherExpectation;

function peg$padEnd(str: string, targetLength: number, padString: string) {
  padString = padString || ' ';
  if (str.length > targetLength) {
    return str;
  }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

export class SyntaxError extends Error {
  public static buildMessage(expected: Expectation[], found: string | null) {
    function hex(ch: string): string {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s: string): string {
      return s
        .replace(/\\/g, "\\\\")
        .replace(/"/g,  "\\\"")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,            (ch) => "\\x0" + hex(ch) )
        .replace(/[\x10-\x1F\x7F-\x9F]/g, (ch) => "\\x"  + hex(ch) );
    }

    function classEscape(s: string): string {
      return s
        .replace(/\\/g, "\\\\")
        .replace(/\]/g, "\\]")
        .replace(/\^/g, "\\^")
        .replace(/-/g,  "\\-")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,            (ch) => "\\x0" + hex(ch) )
        .replace(/[\x10-\x1F\x7F-\x9F]/g, (ch) => "\\x"  + hex(ch) );
    }

    function describeExpectation(expectation: Expectation) {
      switch (expectation.type) {
        case "literal":
          return "\"" + literalEscape(expectation.text) + "\"";
        case "class":
          const escapedParts = expectation.parts.map((part) => {
            return Array.isArray(part)
              ? classEscape(part[0] as string) + "-" + classEscape(part[1] as string)
              : classEscape(part);
          });

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        case "any":
          return "any character";
        case "end":
          return "end of input";
        case "other":
          return expectation.description;
      }
    }

    function describeExpected(expected1: Expectation[]) {
      const descriptions = expected1.map(describeExpectation);
      let i: number;
      let j: number;

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found1: string | null) {
      return found1 ? "\"" + literalEscape(found1) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  }

  public message: string;
  public expected: Expectation[];
  public found: string | null;
  public location: IFileRange;
  public name: string;

  constructor(message: string, expected: Expectation[], found: string | null, location: IFileRange) {
    super();
    this.message = message;
    this.expected = expected;
    this.found = found;
    this.location = location;
    this.name = "SyntaxError";

    if (typeof (Object as any).setPrototypeOf === "function") {
      (Object as any).setPrototypeOf(this, SyntaxError.prototype);
    } else {
      (this as any).__proto__ = SyntaxError.prototype;
    }
    if (typeof (Error as any).captureStackTrace === "function") {
      (Error as any).captureStackTrace(this, SyntaxError);
    }
  }

  format(sources: { source: string; text: string }[]): string {
    let str = 'Error: ' + this.message;
    if (this.location) {
      let src: string[] | null = null;
      let k;
      for (k = 0; k < sources.length; k++) {
        if (sources[k].source === this.location.source) {
          src = sources[k].text.split(/\r\n|\n|\r/g);
          break;
        }
      }
      let s = this.location.start;
      let loc = this.location.source + ':' + s.line + ':' + s.column;
      if (src) {
        let e = this.location.end;
        let filler = peg$padEnd('', s.line.toString().length, ' ');
        let line = src[s.line - 1];
        let last = s.line === e.line ? e.column : line.length + 1;
        str += '\n --> ' + loc + '\n' + filler + ' |\n' + s.line + ' | ' + line + '\n' + filler + ' | ' +
          peg$padEnd('', s.column - 1, ' ') +
          peg$padEnd('', last - s.column, '^');
      } else {
        str += '\n at ' + loc;
      }
    }
    return str;
  }
}

function peg$parse(input: string, options?: IParseOptions) {
  options = options !== undefined ? options : {};

  const peg$FAILED: Readonly<any> = {};
  const peg$source = options.grammarSource;

  const peg$startRuleFunctions: {[id: string]: any} = { orderBy: peg$parseorderBy };
  let peg$startRuleFunction: () => any = peg$parseorderBy;

  const peg$c0 = ",";
  const peg$c1 = peg$literalExpectation(",", false);
  const peg$c2 = function(head: any, elem: any): any { return elem; };
  const peg$c3 = function(head: any, tail: any): any {
        return [head, ...tail];
      };
  const peg$c4 = function(expr: any, dir: any): any { return dir; };
  const peg$c5 = function(expr: any, dir: any): any {
        return {
          type: 'orderByItem',
          expr,
          dir: dir ?? 'asc',
        }
      };
  const peg$c6 = "(";
  const peg$c7 = peg$literalExpectation("(", false);
  const peg$c8 = ")";
  const peg$c9 = peg$literalExpectation(")", false);
  const peg$c10 = function(value: any): any {
        return value;
      };
  const peg$c11 = function(value: any): any {
        return {
          type: 'memberExpr',
          value,
        };
      };
  const peg$c12 = function(name: any, head: any, arg: any): any { return arg; };
  const peg$c13 = function(name: any, head: any, tail: any): any {
        return {
          type: 'functionExpr',
          name,
          arguments: [head, ...tail],
        }
      };
  const peg$c14 = "in";
  const peg$c15 = peg$literalExpectation("in", false);
  const peg$c16 = function(left: any, right: any): any {
        return {
          type: 'inExpr',
          left,
          right
        }
      };
  const peg$c17 = "eq";
  const peg$c18 = peg$literalExpectation("eq", false);
  const peg$c19 = function(left: any, right: any): any {
        return {
          type: 'eqExpr',
          left,
          right,
        };
      };
  const peg$c20 = "ne";
  const peg$c21 = peg$literalExpectation("ne", false);
  const peg$c22 = function(left: any, right: any): any {
        return {
          type: 'neExpr',
          left,
          right,
        };
      };
  const peg$c23 = "gt";
  const peg$c24 = peg$literalExpectation("gt", false);
  const peg$c25 = function(left: any, right: any): any {
        return {
          type: 'gtExpr',
          left,
          right,
        };
      };
  const peg$c26 = "ge";
  const peg$c27 = peg$literalExpectation("ge", false);
  const peg$c28 = function(left: any, right: any): any {
        return {
          type: 'geExpr',
          left,
          right,
        };
      };
  const peg$c29 = "lt";
  const peg$c30 = peg$literalExpectation("lt", false);
  const peg$c31 = function(left: any, right: any): any {
        return {
          type: 'ltExpr',
          left,
          right,
        };
      };
  const peg$c32 = "le";
  const peg$c33 = peg$literalExpectation("le", false);
  const peg$c34 = function(left: any, right: any): any {
        return {
          type: 'leExpr',
          left,
          right,
        };
      };
  const peg$c35 = "and";
  const peg$c36 = peg$literalExpectation("and", false);
  const peg$c37 = function(left: any, right: any): any {
        return {
          type: 'andExpr',
          left,
          right,
        };
      };
  const peg$c38 = "or";
  const peg$c39 = peg$literalExpectation("or", false);
  const peg$c40 = function(left: any, right: any): any {
        return {
          type: 'orExpr',
          left,
          right,
        };
      };
  const peg$c41 = "[";
  const peg$c42 = peg$literalExpectation("[", false);
  const peg$c43 = "]";
  const peg$c44 = peg$literalExpectation("]", false);
  const peg$c45 = function(head: any, tail: any): any {
        return {
          type: 'arrayExpr',
          value: [head, ...tail],
        };
      };
  const peg$c46 = /^[^"]/;
  const peg$c47 = peg$classExpectation(["\""], true, false);
  const peg$c48 = function(value: any): any {
        return {
          type: 'primitive',
          value: value.join(''),
        }
      };
  const peg$c49 = ".";
  const peg$c50 = peg$literalExpectation(".", false);
  const peg$c51 = "e";
  const peg$c52 = peg$literalExpectation("e", true);
  const peg$c53 = function(): any {
        return {
          type: 'primitive',
          value: Number.parseFloat(text()),
        };
      };
  const peg$c54 = "true";
  const peg$c55 = peg$literalExpectation("true", true);
  const peg$c56 = "false";
  const peg$c57 = peg$literalExpectation("false", true);
  const peg$c58 = function(value: any): any {
        return {
          type: 'primitive',
          value: value === "true" ? true : false,
        };
      };
  const peg$c59 = "null";
  const peg$c60 = peg$literalExpectation("null", false);
  const peg$c61 = function(): any {
        return {
          type: 'primitive',
          value: null,
        };
      };
  const peg$c62 = "asc";
  const peg$c63 = peg$literalExpectation("asc", false);
  const peg$c64 = "desc";
  const peg$c65 = peg$literalExpectation("desc", false);
  const peg$c66 = "_";
  const peg$c67 = peg$literalExpectation("_", false);
  const peg$c68 = "+";
  const peg$c69 = peg$literalExpectation("+", false);
  const peg$c70 = "-";
  const peg$c71 = peg$literalExpectation("-", false);
  const peg$c72 = /^[A-Z]/;
  const peg$c73 = peg$classExpectation([["A", "Z"]], false, false);
  const peg$c74 = /^[a-z]/;
  const peg$c75 = peg$classExpectation([["a", "z"]], false, false);
  const peg$c76 = /^[0-9]/;
  const peg$c77 = peg$classExpectation([["0", "9"]], false, false);
  const peg$c78 = "\"";
  const peg$c79 = peg$literalExpectation("\"", false);
  const peg$c80 = " ";
  const peg$c81 = peg$literalExpectation(" ", false);

  let peg$currPos = 0;
  let peg$savedPos = 0;
  const peg$posDetailsCache = [{ line: 1, column: 1 }];
  let peg$maxFailPos = 0;
  let peg$maxFailExpected: Expectation[] = [];
  let peg$silentFails = 0;

  let peg$result;

  if (options.startRule !== undefined) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text(): string {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location(): IFileRange {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description: string, location1?: IFileRange) {
    location1 = location1 !== undefined
      ? location1
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location1
    );
  }

  function error(message: string, location1?: IFileRange) {
    location1 = location1 !== undefined
      ? location1
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location1);
  }

  function peg$literalExpectation(text1: string, ignoreCase: boolean): ILiteralExpectation {
    return { type: "literal", text: text1, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts: IClassParts, inverted: boolean, ignoreCase: boolean): IClassExpectation {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation(): IAnyExpectation {
    return { type: "any" };
  }

  function peg$endExpectation(): IEndExpectation {
    return { type: "end" };
  }

  function peg$otherExpectation(description: string): IOtherExpectation {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos: number) {
    let details = peg$posDetailsCache[pos];
    let p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos: number, endPos: number): IFileRange {
    const startPosDetails = peg$computePosDetails(startPos);
    const endPosDetails = peg$computePosDetails(endPos);

    return {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected1: Expectation) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected1);
  }

  function peg$buildSimpleError(message: string, location1: IFileRange) {
    return new SyntaxError(message, [], "", location1);
  }

  function peg$buildStructuredError(expected1: Expectation[], found: string | null, location1: IFileRange) {
    return new SyntaxError(
      SyntaxError.buildMessage(expected1, found),
      expected1,
      found,
      location1
    );
  }

  function peg$parseorderBy(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseorderByItem();
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 44) {
        s4 = peg$c0;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1); }
      }
      if (s4 as any !== peg$FAILED) {
        s5 = peg$parseorderByItem();
        if (s5 as any !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$c2(s1, s5);
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s4 = peg$c0;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c1); }
        }
        if (s4 as any !== peg$FAILED) {
          s5 = peg$parseorderByItem();
          if (s5 as any !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c2(s1, s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c3(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseorderByItem(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseleftExpr();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseSP();
      if (s3 as any !== peg$FAILED) {
        s4 = peg$parsedirection();
        if (s4 as any !== peg$FAILED) {
          peg$savedPos = s2;
          s3 = peg$c4(s1, s4);
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any === peg$FAILED) {
        s2 = null;
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseparenExpr(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c6;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c7); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseorExpr();
      if (s2 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 41) {
          s3 = peg$c8;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c9); }
        }
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c10(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseprimaryExpr(): any {
    let s0;

    s0 = peg$parseleftExpr();
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseprimitive();
    }

    return s0;
  }

  function peg$parseleftExpr(): any {
    let s0;

    s0 = peg$parsefunctionExpr();
    if (s0 as any === peg$FAILED) {
      s0 = peg$parsememberExpr();
    }

    return s0;
  }

  function peg$parsememberExpr(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseodataIdentifier();
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c11(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsefunctionExpr(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseodataIdentifier();
    if (s1 as any !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c6;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c7); }
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseprimaryExpr();
        if (s3 as any !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c0;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c1); }
          }
          if (s6 as any !== peg$FAILED) {
            s7 = peg$parseprimaryExpr();
            if (s7 as any !== peg$FAILED) {
              peg$savedPos = s5;
              s6 = peg$c12(s1, s3, s7);
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 as any !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 44) {
              s6 = peg$c0;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c1); }
            }
            if (s6 as any !== peg$FAILED) {
              s7 = peg$parseprimaryExpr();
              if (s7 as any !== peg$FAILED) {
                peg$savedPos = s5;
                s6 = peg$c12(s1, s3, s7);
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          if (s4 as any !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s5 = peg$c8;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c9); }
            }
            if (s5 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c13(s1, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserelationalExpr(): any {
    let s0;

    s0 = peg$parseparenExpr();
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseinExpr();
      if (s0 as any === peg$FAILED) {
        s0 = peg$parseeqExpr();
        if (s0 as any === peg$FAILED) {
          s0 = peg$parseneExpr();
          if (s0 as any === peg$FAILED) {
            s0 = peg$parsegtExpr();
            if (s0 as any === peg$FAILED) {
              s0 = peg$parsegeExpr();
              if (s0 as any === peg$FAILED) {
                s0 = peg$parseltExpr();
                if (s0 as any === peg$FAILED) {
                  s0 = peg$parseleExpr();
                  if (s0 as any === peg$FAILED) {
                    s0 = peg$parsefunctionExpr();
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseinExpr(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseleftExpr();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseSP();
      if (s2 as any !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c14) {
          s3 = peg$c14;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c15); }
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseSP();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parsearrayExpr();
            if (s5 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c16(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseeqExpr(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseleftExpr();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseSP();
      if (s2 as any !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c17) {
          s3 = peg$c17;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c18); }
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseSP();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseprimitive();
            if (s5 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c19(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseneExpr(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseleftExpr();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseSP();
      if (s2 as any !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c20) {
          s3 = peg$c20;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c21); }
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseSP();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseprimitive();
            if (s5 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c22(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsegtExpr(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseleftExpr();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseSP();
      if (s2 as any !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c23) {
          s3 = peg$c23;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c24); }
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseSP();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseprimitive();
            if (s5 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c25(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsegeExpr(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseleftExpr();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseSP();
      if (s2 as any !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c26) {
          s3 = peg$c26;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c27); }
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseSP();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseprimitive();
            if (s5 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c28(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseltExpr(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseleftExpr();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseSP();
      if (s2 as any !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c29) {
          s3 = peg$c29;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c30); }
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseSP();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseprimitive();
            if (s5 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c31(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseleExpr(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseleftExpr();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseSP();
      if (s2 as any !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c32) {
          s3 = peg$c32;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c33); }
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseSP();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseprimitive();
            if (s5 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c34(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseandExpr(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parserelationalExpr();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseSP();
      if (s2 as any !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c35) {
          s3 = peg$c35;
          peg$currPos += 3;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c36); }
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseSP();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseandExpr();
            if (s5 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c37(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$parserelationalExpr();
    }

    return s0;
  }

  function peg$parseorExpr(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseandExpr();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseSP();
      if (s2 as any !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c38) {
          s3 = peg$c38;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c39); }
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseSP();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseorExpr();
            if (s5 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c40(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseandExpr();
    }

    return s0;
  }

  function peg$parsearrayExpr(): any {
    let s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c41;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c42); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseprimitive();
      if (s2 as any !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c0;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c1); }
        }
        if (s5 as any !== peg$FAILED) {
          s6 = peg$parseprimitive();
          if (s6 as any !== peg$FAILED) {
            peg$savedPos = s4;
            s5 = peg$c2(s2, s6);
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 as any !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c0;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c1); }
          }
          if (s5 as any !== peg$FAILED) {
            s6 = peg$parseprimitive();
            if (s6 as any !== peg$FAILED) {
              peg$savedPos = s4;
              s5 = peg$c2(s2, s6);
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 as any !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s4 = peg$c43;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c44); }
          }
          if (s4 as any !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c45(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseprimitive(): any {
    let s0;

    s0 = peg$parsestring();
    if (s0 as any === peg$FAILED) {
      s0 = peg$parsenumber();
      if (s0 as any === peg$FAILED) {
        s0 = peg$parseboolean();
        if (s0 as any === peg$FAILED) {
          s0 = peg$parsenull();
        }
      }
    }

    return s0;
  }

  function peg$parsestring(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseDQUOTE();
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      if (peg$c46.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c47); }
      }
      if (s3 as any !== peg$FAILED) {
        while (s3 as any !== peg$FAILED) {
          s2.push(s3);
          if (peg$c46.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c47); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseDQUOTE();
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c48(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsenumber(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parseSIGN();
    if (s1 as any === peg$FAILED) {
      s1 = null;
    }
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseDIGIT();
      if (s3 as any !== peg$FAILED) {
        while (s3 as any !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseDIGIT();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s4 = peg$c49;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c50); }
        }
        if (s4 as any !== peg$FAILED) {
          s5 = [];
          s6 = peg$parseDIGIT();
          if (s6 as any !== peg$FAILED) {
            while (s6 as any !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseDIGIT();
            }
          } else {
            s5 = peg$FAILED;
          }
          if (s5 as any !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 as any === peg$FAILED) {
          s3 = null;
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$currPos;
          if (input.substr(peg$currPos, 1).toLowerCase() === peg$c51) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c52); }
          }
          if (s5 as any !== peg$FAILED) {
            s6 = peg$parseSIGN();
            if (s6 as any === peg$FAILED) {
              s6 = null;
            }
            if (s6 as any !== peg$FAILED) {
              s7 = [];
              s8 = peg$parseDIGIT();
              if (s8 as any !== peg$FAILED) {
                while (s8 as any !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parseDIGIT();
                }
              } else {
                s7 = peg$FAILED;
              }
              if (s7 as any !== peg$FAILED) {
                s5 = [s5, s6, s7];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 as any === peg$FAILED) {
            s4 = null;
          }
          if (s4 as any !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c53();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseboolean(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c54) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c55); }
    }
    if (s1 as any === peg$FAILED) {
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c56) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c57); }
      }
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c58(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsenull(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c59) {
      s1 = peg$c59;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c60); }
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c61();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsedirection(): any {
    let s0;

    if (input.substr(peg$currPos, 3) === peg$c62) {
      s0 = peg$c62;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c63); }
    }
    if (s0 as any === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c64) {
        s0 = peg$c64;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c65); }
      }
    }

    return s0;
  }

  function peg$parseodataIdentifier(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseidentifierLeadingCharacter();
    if (s2 as any !== peg$FAILED) {
      s3 = [];
      s4 = peg$parseidentifierCharacter();
      while (s4 as any !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parseidentifierCharacter();
      }
      if (s3 as any !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parseidentifierLeadingCharacter(): any {
    let s0;

    s0 = peg$parseALPHA();
    if (s0 as any === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 95) {
        s0 = peg$c66;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c67); }
      }
    }

    return s0;
  }

  function peg$parseidentifierCharacter(): any {
    let s0;

    s0 = peg$parseALPHA();
    if (s0 as any === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 95) {
        s0 = peg$c66;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c67); }
      }
      if (s0 as any === peg$FAILED) {
        s0 = peg$parseDIGIT();
      }
    }

    return s0;
  }

  function peg$parseSIGN(): any {
    let s0;

    if (input.charCodeAt(peg$currPos) === 43) {
      s0 = peg$c68;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c69); }
    }
    if (s0 as any === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 45) {
        s0 = peg$c70;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c71); }
      }
    }

    return s0;
  }

  function peg$parseALPHA(): any {
    let s0;

    if (peg$c72.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c73); }
    }
    if (s0 as any === peg$FAILED) {
      if (peg$c74.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c75); }
      }
    }

    return s0;
  }

  function peg$parseDIGIT(): any {
    let s0;

    if (peg$c76.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c77); }
    }

    return s0;
  }

  function peg$parseDQUOTE(): any {
    let s0;

    if (input.charCodeAt(peg$currPos) === 34) {
      s0 = peg$c78;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c79); }
    }

    return s0;
  }

  function peg$parseSP(): any {
    let s0;

    if (input.charCodeAt(peg$currPos) === 32) {
      s0 = peg$c80;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c81); }
    }

    return s0;
  }

  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

export interface IParseOptions {
  filename?: string;
  startRule?: string;
  tracer?: any;
  [key: string]: any;
}
export type ParseFunction = (input: string, options?: IParseOptions) => any;
export const parse: ParseFunction = peg$parse;

